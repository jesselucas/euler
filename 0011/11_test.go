package main

import "testing"

const testMatrixSeed = `1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
2 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
4 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
5 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
6 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
7 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
8 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
9 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
10 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
11 2 3 4 5 6 7 8 9 100 11 12 13 14 15 16 17 18 19 20
12 2 3 4 5 6 7 8 90 10 11 12 13 14 15 16 17 18 19 20
13 2 3 4 5 6 7 80 9 10 11 12 13 14 15 16 17 18 19 20
14 2 3 4 5 6 70 8 9 10 11 12 13 14 15 16 17 18 19 20
15 2 3 4 5 60 7 8 9 10 11 12 13 14 15 16 17 18 19 20
16 2 3 4 50 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
17 2 3 40 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
18 2 30 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
19 20 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
20 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20`

// Highest value is in columns (horizontal)
var testCMatrix matrix = [20][20]int{
	[20]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{6, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{7, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{9, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{11, 2, 3, 4, 5, 6, 7, 4000, 3000, 100, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{12, 2, 3, 4, 5, 6, 7, 8, 90, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{13, 2, 3, 4, 5, 6, 7, 80, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{14, 2, 3, 4, 5, 6, 70, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{15, 2, 3, 4, 5, 60, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{16, 2, 3, 4, 50, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{17, 2, 3, 40, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{18, 2, 30, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{19, 20, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{20, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
}

// Highest value is in rows (vertical)
var testRMatrix matrix = [20][20]int{
	[20]int{1000, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{2000, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{3000, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{6, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{7, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{9, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{11, 2, 3, 4, 5, 6, 7, 8, 9, 100, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{12, 2, 3, 4, 5, 6, 7, 8, 90, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{13, 2, 3, 4, 5, 6, 7, 80, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{14, 2, 3, 4, 5, 6, 70, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{15, 2, 3, 4, 5, 60, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{16, 2, 3, 4, 50, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{17, 2, 3, 40, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{18, 2, 30, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{19, 20, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{20, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
}

// Highest value is in ascending diagonal
var testAMatrix matrix = [20][20]int{
	[20]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{6, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{7, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{9, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{11, 2, 3, 4, 5, 6, 7, 8, 9, 100, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{12, 2, 3, 4, 5, 6, 7, 8, 90, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{13, 2, 3, 4, 5, 6, 7, 80, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{14, 2, 3, 4, 5, 6, 70, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{15, 2, 3, 4, 5, 60, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{16, 2, 3, 4, 50, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{17, 2, 3, 40, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{18, 2, 30, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{19, 20, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{20, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
}

// Highest value is in descending diagonal
var testDMatrix matrix = [20][20]int{
	[20]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{3, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{6, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{7, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{8, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{9, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{10, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{11, 2, 3, 4, 5, 6, 7, 8, 9, 100, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{12, 2, 3, 4, 5, 6, 7, 8, 90, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{13, 2, 3, 4, 5, 6, 7, 80, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{14, 2, 3, 4, 5, 6, 70, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{15, 2, 3, 4, 5, 60, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{16, 2, 3, 4, 50, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20},
	[20]int{17, 2, 3, 40, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 100, 18, 19, 20},
	[20]int{18, 2, 30, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 100, 19, 20},
	[20]int{19, 20, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 100, 20},
	[20]int{20, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 5000},
}

func TestCreatPoints(t *testing.T) {
	var tests = []struct {
		str    string
		result matrix
	}{
		{testMatrixSeed, testAMatrix},
	}

	for _, test := range tests {
		m, err := createPoints(test.str)
		if err != nil {
			t.Fatal(err)
		}

		if m != test.result {
			t.Fatalf("%v - Received %v. Should be %v", test.str, m, test.result)
		}
	}
}

func TestCheckSum(t *testing.T) {
	var tests = []struct {
		m      matrix
		n      int // number of adjacent values to check
		result int
	}{
		{testAMatrix, 4, 340},
		{testAMatrix, 10, 560},
		{testCMatrix, 4, 7111},
		{testRMatrix, 4, 6004},
		{testDMatrix, 4, 5300},
	}

	for _, test := range tests {
		sum := checkSum(test.m, test.n)
		if sum != test.result {
			t.Fatalf("%v - Received %v. Should be %v", test.m, sum, test.result)
		}
	}
}

func TestCheckProduct(t *testing.T) {
	var tests = []struct {
		m      matrix
		n      int // number of adjacent values to check
		result int
	}{
		{testAMatrix, 4, 50400000},
		{testAMatrix, 10, 72576000000000000},
		{testCMatrix, 4, 13200000000},
		{testRMatrix, 4, 24000000000},
		{testDMatrix, 4, 5000000000},
	}

	for _, test := range tests {
		sum := checkProduct(test.m, test.n)
		if sum != test.result {
			t.Fatalf("%v - Received %v. Should be %v", test.m, sum, test.result)
		}
	}
}
